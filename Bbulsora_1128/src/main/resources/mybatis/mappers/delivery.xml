<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.delivery">
	<resultMap id="delResult" type="deliveryVO">
		<id property="dlvrySeq" column="dlvry_seq" />
		<result property="dlvryCd" column="dlvry_cd" />
		<result property="dlvryQtt" column="dlvry_qtt" />
		<result property="reqDate" column="req_date" />
		<result property="dlvryDate" column="dlvry_date" />
		<result property="compCd" column="comp_cd" />
		<result property="compName" column="comp_name" />
		<result property="itemCd" column="item_cd" />
		<result property="itemName" column="item_name" />
		<result property="stateCd" column="state_cd" />
		<result property="stateContent" column="state_content" />
		<result property="totalQtt" column="total_qtt" />
		<result property="cnt" column="cnt" />
	</resultMap>
	<resultMap id="fifoResult" type="fifoVO">
		<result property="dlvryQtt" column="dlvry_qtt" />
		<result property="remainQtt" column="remain_qtt" />
		<result property="lot" column="lot" />
		<result property="stockQtt" column="stock_qtt" />
		<result property="compCd" column="comp_cd" />
		<result property="itemCd" column="item_cd" />
		<result property="dlvryCd" column="dlvry_cd" />
		<result property="dlvrySeq" column="dlvry_seq" />
		<result property="stateCd" column="state_cd" />
	</resultMap>

	<insert id="insertDeliveryReq" parameterType="deliveryVO">
		<![CDATA[
			insert into delivery(dlvry_cd, dlvry_qtt, req_date, comp_cd, item_cd, state_cd) 
			values (#{dlvryCd}, #{dlvryQtt}, #{reqDate}, #{compCd}, #{itemCd}, 'D001')
		]]>
	</insert>

	<select id="selectDeliveryAll" resultMap="delResult">
		<![CDATA[
			select d.dlvry_cd, d.dlvry_qtt, d.req_date, c.comp_cd, c.comp_name,
			d.state_cd, s.state_content, i.item_cd, i.item_name, count(d.dlvry_cd) as cnt
				from delivery d
				left join company c
    			on d.comp_cd = c.comp_cd
    			left join item i
    			on d.item_cd = i.item_cd
    			left join state s
    			on d.state_cd = s.state_cd
    			group by d.dlvry_cd;
		]]>
	</select>

	<select id="selectSearchDelivery" resultMap="delResult" parameterType="Map">
		<![CDATA[
			select d.dlvry_cd, d.dlvry_qtt, d.req_date, c.comp_cd, c.comp_name, 
			d.state_cd, s.state_content, i.item_cd, i.item_name, count(d.dlvry_cd) as cnt
				from delivery d
				left join company c
    			on d.comp_cd = c.comp_cd
    			left join item i
    			on d.item_cd = i.item_cd
    			left join state s
    			on d.state_cd = s.state_cd
    			where
    	]]>
    	<choose>
			<when test=" fromDate != null and fromDate != '' and toDate != null and toDate != ''">
	    		<![CDATA[req_date >= #{fromDate} and req_date <= #{toDate} and]]>
			</when> 
			<when test=" fromDate != null and fromDate != '' and (toDate == null or toDate == '')">
				<![CDATA[req_date >= #{fromDate} and]]>
			</when>
			<when test=" (fromDate == null or fromDate == '') and toDate != null and toDate != ''">
				<![CDATA[req_date <= #{toDate} and]]>
			</when>
			<otherwise>
			</otherwise>
		</choose>
			<if test=" client != null and client !=''">
   	   			<![CDATA[c.comp_name = #{client} and]]>
			</if>		
    			d.dlvry_cd is NOT NULL
    			group by d.dlvry_cd;
		
	</select>
	
	<select id="searchReqInfoByCode" resultMap="delResult" parameterType="Map">
		<![CDATA[
			select d.dlvry_seq, d.dlvry_cd, d.dlvry_qtt, d.req_date, c1.comp_cd, c1.comp_name, sum(stk.stock_qtt) as total_qtt,
				d.state_cd, s.state_content, i.item_cd, i.item_name, count(d.dlvry_cd) as cnt
				from delivery d
   				left join state s
    			on d.state_cd = s.state_cd
    			left join company c1
    			on d.comp_cd = c1.comp_cd
    			left join item i
    			on d.item_cd = i.item_cd
    			left join company c2
    			on i.comp_cd = c2.comp_cd
				left join order_t o
    			on d.item_cd = o.item_cd
    			left join store str
    			on o.order_seq = str.order_seq
    			left join stock stk
    			on str.store_seq = stk.store_seq
    			where d.dlvry_cd = #{dlvryCd}
    			and o.comp_cd = #{compCd}
                and stk.loc_area is NOT NULL
                group by d.item_cd;
		]]>
	</select>

	<update id="updateAllDeliveryStatus" parameterType="Map">
		<![CDATA[
			update delivery set state_cd = #{stateCd}
			where dlvry_cd = #{dlvryCd}		
		]]>
	</update>
	
	<update id="updateSepDeliveryStatus" parameterType="Map">
		<![CDATA[
			update delivery set state_cd = #{stateCd}
			where dlvry_seq = #{dlvrySeq}
		]]>
	</update>
	
	<select id="selectReqByDeliveryCode" resultMap="delResult" parameterType="Map">
		<![CDATA[
			select comp_cd, item_cd, dlvry_cd, dlvry_qtt from delivery
			where dlvry_cd = #{dlvryCd}
		]]>
	</select>
	
	<select id="selectForMultiFIFO" resultMap="fifoResult" parameterType="deliveryVO">
	  <![CDATA[
	  with FIFO as (
			select dlvry_cd as lot, dlvry_qtt from delivery where comp_cd = #{compCd} and item_cd = #{itemCd} and dlvry_cd = #{dlvryCd}
				union
			select stk.lot, stk.stock_qtt from stock stk
				left join store str on stk.store_seq = str.store_seq
				left join order_t o on str.order_seq = o.order_seq
				left join company c on o.comp_cd = c.comp_cd
				where o.item_cd = #{itemCd} and c.comp_cd = #{compCd} and stk.stock_qtt != 0
			) select f.lot, case when (sum(g.dlvry_qtt)-#{dlvryQtt})<0 then 0 else (sum(g.dlvry_qtt)-#{dlvryQtt}) end remain_qtt
					from FIFO f
					left join FIFO g
					on g.lot <= f.lot
					group by f.lot, f.dlvry_qtt
					having f.dlvry_qtt-sum(g.dlvry_qtt) > #{dlvryQtt}*(-1)
      ]]>	
	</select>
	
	<select id="selectForSingleFIFO" resultMap="fifoResult" parameterType="Map">
	  <![CDATA[
	  with FIFO as (
			select dlvry_cd as lot, dlvry_qtt from delivery where comp_cd = #{compCd} and item_cd = #{itemCd} and dlvry_cd = #{dlvryCd}
				union
			select stk.lot, stk.stock_qtt from stock stk
				left join store str on stk.store_seq = str.store_seq
				left join order_t o on str.order_seq = o.order_seq
				left join company c on o.comp_cd = c.comp_cd
				where o.item_cd = #{itemCd} and c.comp_cd = #{compCd} and stk.stock_qtt != 0
			) select f.lot, case when (sum(g.dlvry_qtt)-#{dlvryQtt})<0 then 0 else (sum(g.dlvry_qtt)-#{dlvryQtt}) end remain_qtt
					from FIFO f
					left join FIFO g
					on g.lot <= f.lot
					group by f.lot, f.dlvry_qtt
					having f.dlvry_qtt-sum(g.dlvry_qtt) > #{dlvryQtt}*(-1)
      ]]>	
	</select>
</mapper>